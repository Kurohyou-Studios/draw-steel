mixin damageHeaders(wrapper)
  -
    const mix = wrapper ?
      'span' :
      'number';
  each t in ['ranged','melee']
    if wrapper
      +checkbox({name:`show ${t}`,hidden:'',value:1,trigger:{
        calculation:'determineDamageColumnDisplay'
      }}).display-control
    div(class=`${t}${wrapper ? ' controlled-display' : ''}`).damage-columns&attributes(attributes)
      .damage-header
        span(data-i18n=`${t} weapon damage`).capitalize
      each s,n in spine.dicePoints
        -
          const trigger = wrapper ?
            {affects:[`${k.repeatingPrefix}show_${t}`]} :
            {};
        label.flex-box.flex-column
          +#{mix}({name:`${t} damage ${n+1}`,trigger})
          +cutWrapper
            span #{s}
+headedCut
  +header
    span(data-i18n='modifiers').uppercase
  +content.modifier-container
    .repeating-section
      +editableRepeat({name:'modifiers'})
        each name in ['name','implement','armor','type','speed','melee','ranged','area','stability','stamina','benefits','ranged damage 1','ranged damage 2','ranged damage 3','melee damage 1','melee damage 2','melee damage 3']
          +hidden({name,value:''})
        +diamondBorder('bottom')
          .modifier-display
            .flex-box.half-gap.grid-span-all.modifier-display-header
              +steelCheck({name:'active',value:1,checked:''})
              +span({name:'type'}).bold.uppercase
              +span({name:'name'}).name
            each name in ['implement','speed','melee','ranged','armor','area','stability','stamina']
              +hidden({name,value:''}).display-control--non-zero
              +cutWrapper()(class=name).controlled-display
                .input-label.stacked
                  span(data-i18n=name).input-label__text
                  +span({name}).input-label__input
            +damageHeaders('span')
            +span({name:'benefits'}).description.grid-span-all
        +editLayout.modifier-edit
          .name-row.grid-span-all
            +cutLabel({inputObj:{name:'name',type:'text'},spanObj:{'data-i18n':'name',class:'capitalize'}})
            +cutSelectLabel({inputObj:{name:'type'},spanObj:{'data-i18n':'type',class:'capitalize'}})
              +option({value:'','data-i18n':'select one',selected:''}).capitalize
              each value in ['kit','enchantment','prayer','augmentation','ward']
                +option({value,'data-i18n':value}).capitalize
          +cutLabel({inputObj:{name:'implement',type:'text'},spanObj:{'data-i18n':'weapon / implement',class:'capitalize'}}).grid-span-3
          each name in ['speed','melee','ranged']
            +cutLabel({inputObj:{name,type:'number'},spanObj:{'data-i18n':name,class:'capitalize'}})
          +cutLabel({inputObj:{name:'armor',type:'text'},spanObj:{'data-i18n':'armor',class:'capitalize'}}).grid-span-3
          each name in ['area','stability','stamina']
            +cutLabel({inputObj:{name,type:'number'},spanObj:{'data-i18n':name,class:'capitalize'}})
          +damageHeaders.grid-span-3
          +adaptiveTextarea({name:'benefits'}).grid-span-all.underlined
+scss('sheet').
  .modifier-display-header{
    align-items: start;
    .steel-check{
      margin-top: var(--tiny-gap);
    }
  }
  .modifier-head{
    .diamond-content{
      display: flex;
      justify-content: center;
    }
  }
  .modifier-display{
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    gap: var(--tiny-gap);
    grid-auto-flow: dense;
    .implement,.armor,.damage-columns{
      grid-column: span 3;
    }
  }
  .modifier-container{
    break-inside: avoid;
    .diamond{
      z-index:10;
    }
    .collapse{
      right: 0;
    }
    .repitem:first-child{
      margin-top: var(--tiny-gap);
    }
    .repcontainer{
      gap: var(--tiny-gap);
    }
  }
  .modifier-container,
  .modifier-edit{
    .damage-columns{
      column-count: 3;
      column-width: 60px;
      column-gap: var(--half-gap);
      column-rule: 2px solid var(--borderColor);
      label{
        align-items: stretch;
        input{
          min-width: 100%;
        }
        .cut-container{
          display: grid;
          justify-items: center;
        }
      }
      > .damage-header{
        column-span: all;
        text-align: center;
      }
      > * {
        break-inside: avoid;
      }
    }
  }
  .modifier-edit{
    .name-row{
      display: grid;
      gap: inherit;
      grid-template-columns: 1fr auto;
    }
    > .cutWrapper > .cut-container{
      display: grid;
      grid-template-columns: repeat(6,1fr);
      gap: var(--tiny-gap);
    }
  }
+module.
  /**
   * 
   * @param {object} trigger - The trigger that caused the function to be called
   * @param {object} attributes - The attribute values of the character
   * @param {object[]} sections - All the repeating section IDs
   * @param {object} casc - Expanded cascade object
   */
  const determineDamageColumnDisplay = function({trigger,attributes,sections,casc}){
    const [section,rowID,attr] = k.parseTriggerName(trigger.name);
    const row = `${section}_${rowID}`;
    const rangeType = attr.replace(/show_/,'');
    let isActive = 0;
    for(let n = 1;n <=3;n++){
      if(attributes[`${row}_${rangeType}_damage_${n}`]){
        isActive = 1;
        break;
      }
    }
    return isActive;
  };
  k.registerFuncs({determineDamageColumnDisplay});